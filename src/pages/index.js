import Head from 'next/head';
import styles from '../styles/Home.module.css';
import React, { useEffect, useState } from 'react';
import { WeatherService } from 'services/WeatherService';
import Header from 'components/Header/Header';
import { fetchFetcher } from '../lib/fetchers';
import LocationSelector from 'components/LocationSelector/LocationSelector';
import { getMaxTemp, getMinTemp, getPrecipitationSum, getAverageWindSpeed } from 'lib/calculations';

const weatherService = WeatherService(fetchFetcher);

const LOCATIONS = ['Horsens', 'Aarhus', 'Copenhagen'];

const Home = () => {
  // States
  const [location, setLocation] = useState(LOCATIONS[0]);
  const [historicalData, setHistoricalData] = useState([]);
  const [forecastData, setForecastData] = useState([]);
  var array = chunk(historicalData, 4);
  var variable = array[array.length-1];

  useEffect(() => {
    handleLoadData();
  }, [location]);

  function handleChangeLocation(location) {
    setLocation(location);
  }

  async function handleLoadData() {
    const [historicalData, forecastData] = await Promise.all([
      weatherService.getDataByCity(location),
      weatherService.getForecast(location),
    ]);

    setHistoricalData(historicalData);
    setForecastData(chunk(forecastData, 4));
  }

  function chunk(items, size) {
    const chunks = [];
    items = [].concat(...items);

    while (items.length) {
      chunks.push(items.splice(0, size));
    }

    return chunks;
  }

  console.log('Max', getMaxTemp(historicalData));
  console.log('Min', getMinTemp(historicalData));
  console.log('Precipitation Sum', getPrecipitationSum(historicalData));
  console.log('Average Wind Speed', getAverageWindSpeed(historicalData));

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header />

      <main className="main">
        <div className="select">
          <LocationSelector
            location={location}
            onLocationChange={(e) => handleChangeLocation(e.target.value)}
          />

          <div
            style={{ background: 'white', padding: 20, borderRadius: 10 }}
          >
            <p><b>Min:</b> {getMinTemp(historicalData)}<b> Max:</b>  {getMaxTemp(historicalData)} <b>Precipitation Sum:</b> {getPrecipitationSum(historicalData)} <b>Avg Wind Speed:</b> {getAverageWindSpeed(historicalData)}</p>

          </div>
        </div>

        <div
          style={{
            width: '100%',
            padding: 20,
            background: 'white',
            borderRadius: 10,
            marginTop: 40,
          }}
        >
          <div>
            <p style={{ fontSize: 50, fontWeight: 400 }}>
              Next 24 Hours
              {/* <span
                style={{
                  fontSize: 12,
                  fontWeight: 300,
                  color: '#939cb0',
                  marginLeft: 10,
                }}
              >
                October
              </span> */}
            </p>

            <div
              style={{
                backgroundColor: '#ededed',
                height: 1,
                marginTop: 15,
                marginBottom: 15,
              }}
            />
          </div>
          <table>
            <thead>
              <tr>
                <th>Time</th>
                <th>Type</th>
                <th>Forecast</th>
              </tr>
            </thead>

            <tbody>
              {forecastData?.map((forecast, index) => (
                <tr key={index}>
                  <td>{forecast[0].getFormattedTime()}</td>
                  <td>{forecast[0].getType()}</td>
                  <td>{forecast[0].getForecast()}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {/* <table>
          <thead>
            <tr>
              <th>Time</th>
              <th>Type</th>
              <th>Forecast</th>
            </tr>
          </thead>

          <tbody>
            {forecastData?.map((forecast, index) => (
              <tr key={index}>
                <td>{forecast.getFormattedTime()}</td>
                <td>{forecast.getType()}</td>
                <td>{forecast.getForecast()}</td>
              </tr>
            ))}
          </tbody>
        </table> */}
        <hr />
        <h2>All data for the latest measurement of each kind</h2>
        <table>
          <thead>
            <tr>
              <th>Measurement</th>
              <th>Data</th>
            </tr>
          </thead>
          <tbody>
              {variable?.map((data, index) => (
                <tr key={index}>
                  <td>{data.getType()}</td>
                  <td>{data.getValue()}</td>
                </tr>
              ))}
            </tbody>
        </table>
      </main>
    </div>
  );
};

export default Home;
